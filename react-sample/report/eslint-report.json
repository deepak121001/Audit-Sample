{
  "projectType": "React",
  "reports": [
    "all",
    "comprehensive"
  ],
  "excludeRules": {
    "enabled": true,
    "rules": [
      "indent",
      "quotes",
      "semi",
      "comma-dangle",
      "no-trailing-spaces",
      "eol-last",
      "no-multiple-empty-lines",
      "space-before-function-paren",
      "space-before-blocks",
      "keyword-spacing",
      "space-infix-ops",
      "object-curly-spacing",
      "array-bracket-spacing",
      "comma-spacing",
      "key-spacing",
      "brace-style",
      "camelcase",
      "new-cap",
      "no-underscore-dangle",
      "no-unused-vars",
      "no-console",
      "no-debugger",
      "prefer-const",
      "no-var",
      "arrow-spacing",
      "no-spaced-func",
      "func-call-spacing",
      "no-multi-spaces",
      "no-trailing-spaces",
      "no-mixed-spaces-and-tabs",
      "no-tabs",
      "no-mixed-operators",
      "operator-linebreak",
      "nonblock-statement-body-position",
      "no-else-return",
      "no-nested-ternary",
      "no-unneeded-ternary",
      "object-shorthand",
      "prefer-template",
      "template-curly-spacing",
      "prefer-arrow-callback",
      "arrow-body-style",
      "no-duplicate-imports",
      "import/order",
      "import/no-unresolved",
      "import/extensions",
      "import/no-extraneous-dependencies",
      "import/prefer-default-export",
      "react/jsx-indent",
      "react/jsx-indent-props",
      "react/jsx-closing-bracket-location",
      "react/jsx-closing-tag-location",
      "react/jsx-curly-spacing",
      "react/jsx-equals-spacing",
      "react/jsx-first-prop-new-line",
      "react/jsx-max-props-per-line",
      "react/jsx-one-expression-per-line",
      "react/jsx-props-no-multi-spaces",
      "react/jsx-tag-spacing",
      "react/jsx-wrap-multilines",
      "react/self-closing-comp",
      "react/jsx-boolean-value",
      "react/jsx-curly-brace-presence",
      "react/jsx-no-bind",
      "react/jsx-no-literals",
      "react/jsx-pascal-case",
      "react/jsx-sort-default-props",
      "react/jsx-sort-props",
      "react/no-array-index-key",
      "react/no-danger",
      "react/no-deprecated",
      "react/no-did-mount-set-state",
      "react/no-did-update-set-state",
      "react/no-direct-mutation-state",
      "react/no-find-dom-node",
      "react/no-is-mounted",
      "react/no-multi-comp",
      "react/no-render-return-value",
      "react/no-set-state",
      "react/no-string-refs",
      "react/no-unescaped-entities",
      "react/no-unknown-property",
      "react/no-unsafe",
      "react/no-unused-prop-types",
      "react/no-unused-state",
      "react/prefer-es6-class",
      "react/prefer-stateless-function",
      "react/prop-types",
      "react/react-in-jsx-scope",
      "react/require-default-props",
      "react/require-optimization",
      "react/require-render-return",
      "react/sort-comp",
      "react/sort-prop-types",
      "react/style-prop-object",
      "react/void-dom-elements-no-children",
      "react/jsx-key",
      "react/jsx-no-duplicate-props",
      "react/jsx-no-undef",
      "react/jsx-uses-react",
      "react/jsx-uses-vars",
      "react/no-array-index-key",
      "react/no-danger",
      "react/no-deprecated",
      "react/no-did-mount-set-state",
      "react/no-did-update-set-state",
      "react/no-direct-mutation-state",
      "react/no-find-dom-node",
      "react/no-is-mounted",
      "react/no-multi-comp",
      "react/no-render-return-value",
      "react/no-set-state",
      "react/no-string-refs",
      "react/no-unescaped-entities",
      "react/no-unknown-property",
      "react/no-unsafe",
      "react/no-unused-prop-types",
      "react/no-unused-state",
      "react/prefer-es6-class",
      "react/prefer-stateless-function",
      "react/prop-types",
      "react/react-in-jsx-scope",
      "react/require-default-props",
      "react/require-optimization",
      "react/require-render-return",
      "react/sort-comp",
      "react/sort-prop-types",
      "react/style-prop-object",
      "react/void-dom-elements-no-children",
      "my-custom-rule",
      "project-specific-rule"
    ],
    "count": 131
  },
  "results": [
    {
      "filePath": "./src/App.js",
      "errorCount": 28,
      "warningCount": 2,
      "messages": [
        {
          "ruleId": "react/function-component-definition",
          "severity": 2,
          "line": 5,
          "column": 13,
          "endLine": 72,
          "endColumn": 2,
          "message": "Function component is not a function declaration",
          "fix": {
            "range": [
              114,
              1853
            ],
            "text": "function App() {\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState(null);\n  \n  // Missing dependency in useEffect\n  useEffect(() => {\n    console.log('Component mounted');\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  \n  const fetchData = async () => {\n    try {\n      // Hardcoded secret for security testing\n      const apiKey = 'sk-1234567890abcdef';\n      const response = await fetch('https://api.example.com/data', {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      const result = await response.json();\n      setData(result);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  \n  const handleClick = () => {\n    setCount(count + 1);\n    // Unused variable\n    const unusedVar = 'this is unused';\n  };\n  \n  // Missing key prop\n  const items = ['item1', 'item2', 'item3'];\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Sample App</h1>\n        <p>Count: {count}</p>\n        <button onClick={handleClick}>\n          Increment\n        </button>\n        \n        {/* Missing alt attribute */}\n        <img src=\"logo.png\" />\n        \n        {/* Missing form label */}\n        <input type=\"text\" placeholder=\"Enter text\" />\n        \n        {/* Color contrast issue */}\n        <p style={{color: '#cccccc'}}>Low contrast text</p>\n        \n        {/* List without proper structure */}\n        {items.map(item => (\n          <div>{item}</div>\n        ))}\n        \n        {data && (\n          <div>\n            <h2>Data loaded</h2>\n            <pre>{JSON.stringify(data, null, 2)}</pre>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}"
          }
        },
        {
          "ruleId": "no-use-before-define",
          "severity": 2,
          "line": 12,
          "column": 5,
          "endLine": 12,
          "endColumn": 14,
          "message": "'fetchData' was used before it was defined."
        },
        {
          "ruleId": "react-hooks/exhaustive-deps",
          "severity": 2,
          "line": 13,
          "column": 11,
          "endLine": 13,
          "endColumn": 61,
          "message": "Definition for rule 'react-hooks/exhaustive-deps' was not found."
        },
        {
          "ruleId": "quote-props",
          "severity": 2,
          "line": 21,
          "column": 11,
          "endLine": 21,
          "endColumn": 46,
          "message": "Unnecessarily quoted property 'Authorization' found.",
          "fix": {
            "range": [
              629,
              644
            ],
            "text": "Authorization"
          }
        },
        {
          "ruleId": "react/jsx-filename-extension",
          "severity": 2,
          "line": 41,
          "column": 5,
          "endLine": 70,
          "endColumn": 11,
          "message": "JSX not allowed in files with extension '.js'"
        },
        {
          "ruleId": "react/button-has-type",
          "severity": 2,
          "line": 45,
          "column": 9,
          "endLine": 47,
          "endColumn": 18,
          "message": "Missing an explicit type attribute for button"
        },
        {
          "ruleId": "jsx-a11y/alt-text",
          "severity": 2,
          "line": 50,
          "column": 9,
          "endLine": 50,
          "endColumn": 31,
          "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."
        },
        {
          "ruleId": "arrow-parens",
          "severity": 2,
          "line": 59,
          "column": 20,
          "endLine": 59,
          "endColumn": 24,
          "message": "Expected parentheses around arrow function argument.",
          "fix": {
            "range": [
              1609,
              1613
            ],
            "text": "(item)"
          }
        }
      ]
    }
  ]
}