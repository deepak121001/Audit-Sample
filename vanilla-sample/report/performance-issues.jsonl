{"type":"inefficient_operation","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":75,"severity":"low","message":"Consider using textContent for text-only content","code":"  document.getElementById('nonexistent').innerHTML = 'test';","context":"    73: // DOM manipulation without checks\n    74: function updateElement() {\n>>> 75:   document.getElementById('nonexistent').innerHTML = 'test';\n    76: }\n    77: ","source":"custom"}
{"type":"memory_leak","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":79,"severity":"medium","message":"Event listener added without removal - potential memory leak","code":"window.addEventListener('load', function() {","context":"    77: \n    78: // Event listener without cleanup\n>>> 79: window.addEventListener('load', function() {\n    80:   console.log('Page loaded');\n    81: });","source":"custom"}
{"type":"memory_leak","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":94,"severity":"medium","message":"Event listener added without removal - potential memory leak","code":"  incrementBtn.addEventListener('click', () => {","context":"    92: \n    93: if (incrementBtn) {\n>>> 94:   incrementBtn.addEventListener('click', () => {\n    95:     count++;\n    96:     if (countElement) countElement.textContent = count;","source":"custom"}
{"type":"memory_leak","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":101,"severity":"medium","message":"Event listener added without removal - potential memory leak","code":"  decrementBtn.addEventListener('click', () => {","context":"    99: \n    100: if (decrementBtn) {\n>>> 101:   decrementBtn.addEventListener('click', () => {\n    102:     count--;\n    103:     if (countElement) countElement.textContent = count;","source":"custom"}
{"type":"memory_leak","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":113,"severity":"medium","message":"Event listener added without removal - potential memory leak","code":"  addTodoBtn.addEventListener('click', () => {","context":"    111: \n    112: if (addTodoBtn && todoInput && todoList) {\n>>> 113:   addTodoBtn.addEventListener('click', () => {\n    114:     const todoText = todoInput.value;\n    115:     if (todoText.trim()) {","source":"custom"}
{"type":"large_dependency","package":"lodash","severity":"low","message":"Large dependency detected: lodash","recommendation":"Consider using lighter alternatives or tree-shaking"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":4,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const unusedVar = 'this is unused';","context":"    2: \n    3: // Unused variable\n>>> 4: const unusedVar = 'this is unused';\n    5: \n    6: // Missing semicolon","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":7,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const missingSemicolon = 'test'","context":"    5: \n    6: // Missing semicolon\n>>> 7: const missingSemicolon = 'test'\n    8: \n    9: // Console.log statements","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":13,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const apiKey = 'sk-1234567890abcdef';","context":"    11: \n    12: // Hardcoded secret for security testing\n>>> 13: const apiKey = 'sk-1234567890abcdef';\n    14: \n    15: // Unsafe eval usage","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":20,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function displayUserInput(input) {","context":"    18: \n    19: // XSS vulnerability\n>>> 20: function displayUserInput(input) {\n    21:   document.getElementById('output').innerHTML = input;\n    22: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":25,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function fetchData() {","context":"    23: \n    24: // Missing error handling\n>>> 25: function fetchData() {\n    26:   const response = fetch('https://api.example.com/data');\n    27:   return response.json();","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":31,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function getData() {","context":"    29: \n    30: // Inconsistent return\n>>> 31: function getData() {\n    32:   if (Math.random() > 0.5) {\n    33:     return ['item1', 'item2'];","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":39,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function processData(data, unusedParam) {","context":"    37: \n    38: // Unused parameter\n>>> 39: function processData(data, unusedParam) {\n    40:   return data;\n    41: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":39,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function processData(data, unusedParam) {","context":"    37: \n    38: // Unused parameter\n>>> 39: function processData(data, unusedParam) {\n    40:   return data;\n    41: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":44,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"async function fetchUserData() {","context":"    42: \n    43: // Missing await\n>>> 44: async function fetchUserData() {\n    45:   const response = fetch('https://api.example.com/users');\n    46:   return response.json();","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":50,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const unsafeRegex = /^[a-zA-Z0-9]+$/;","context":"    48: \n    49: // Unsafe regex\n>>> 50: const unsafeRegex = /^[a-zA-Z0-9]+$/;\n    51: \n    52: // Inconsistent spacing","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":53,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const spacingTest='test';","context":"    51: \n    52: // Inconsistent spacing\n>>> 53: const spacingTest='test';\n    54: \n    55: // Unreachable code","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":56,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function unreachable() {","context":"    54: \n    55: // Unreachable code\n>>> 56: function unreachable() {\n    57:   return 'test';\n    58:   console.log('This will never execute');","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":62,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function riskyFunction() {","context":"    60: \n    61: // Missing try-catch\n>>> 62: function riskyFunction() {\n    63:   const result = JSON.parse('invalid json');\n    64:   return result;","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":71,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const strictModeTest = 'test';","context":"    69: \n    70: // Missing strict mode\n>>> 71: const strictModeTest = 'test';\n    72: \n    73: // DOM manipulation without checks","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":74,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function updateElement() {","context":"    72: \n    73: // DOM manipulation without checks\n>>> 74: function updateElement() {\n    75:   document.getElementById('nonexistent').innerHTML = 'test';\n    76: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":84,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const camelCase = 'test';","context":"    82: \n    83: // Inconsistent naming\n>>> 84: const camelCase = 'test';\n    85: const snake_case = 'test';\n    86: ","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":85,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const snake_case = 'test';","context":"    83: // Inconsistent naming\n    84: const camelCase = 'test';\n>>> 85: const snake_case = 'test';\n    86: \n    87: // Counter functionality","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":125,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function displayUserContent(content) {","context":"    123: \n    124: // Security vulnerability - innerHTML usage\n>>> 125: function displayUserContent(content) {\n    126:   document.getElementById('userContent').innerHTML = content;\n    127: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":130,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function processUserData(user) {","context":"    128: \n    129: // Missing null checks\n>>> 130: function processUserData(user) {\n    131:   return user.name.toUpperCase();\n    132: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":135,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function getProperty(obj, prop) {","context":"    133: \n    134: // Unsafe object access\n>>> 135: function getProperty(obj, prop) {\n    136:   return obj[prop];\n    137: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":140,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function divide(a, b) {","context":"    138: \n    139: // Missing error boundaries\n>>> 140: function divide(a, b) {\n    141:   return a / b;\n    142: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":145,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function globalFunction() {","context":"    143: \n    144: // Global function pollution\n>>> 145: function globalFunction() {\n    146:   console.log('Global function');\n    147: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":150,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const singleQuotes = 'test';","context":"    148: \n    149: // Inconsistent quotes\n>>> 150: const singleQuotes = 'test';\n    151: const doubleQuotes = \"test\";\n    152: ","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":151,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"const doubleQuotes = \"test\";","context":"    149: // Inconsistent quotes\n    150: const singleQuotes = 'test';\n>>> 151: const doubleQuotes = \"test\";\n    152: \n    153: // Missing var/let/const","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":157,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function unusedFunction() {","context":"    155: \n    156: // Unused function\n>>> 157: function unusedFunction() {\n    158:   console.log('This function is never called');\n    159: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":162,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function undocumentedFunction(param) {","context":"    160: \n    161: // Missing JSDoc\n>>> 162: function undocumentedFunction(param) {\n    163:   return param * 2;\n    164: }","source":"eslint"}
{"type":"unused_code","file":"/Users/deepaksharma/projects/ui-code-insight/samples/vanilla-sample/src/index.js","line":167,"severity":"low","message":"Unused variable or import detected","ruleId":"no-unused-vars","code":"function inconsistentIndentation() {","context":"    165: \n    166: // Inconsistent indentation\n>>> 167: function inconsistentIndentation() {\n    168: const test = 'test';\n    169:   return test;","source":"eslint"}
